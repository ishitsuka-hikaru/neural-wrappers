import numpy as np
from typing import Dict, List, Callable, Any, Iterator
from prefetch_generator import BackgroundGenerator
from .internal import DatasetIndex
from ..utilities import flattenList

DimGetterCallable = Callable[[str, DatasetIndex], Any]

class DatasetReader:
	# @param[in] allDims A dictionary with all available top level names (data, label etc.) and, for each name, a list
	#  of dimensions (rgb, depth, etc.). Example: {"data" : ["rgb", "depth"], "labels" : ["depth", "semantic"]}
	# @param[in] dimGetter For each possible dimension defined above, we need to receive a method that tells us how
	#  to retrieve a batch of items. Some dimensions may be overlapped in multiple top-level names, however, they are
	#  logically the same information before transforms, so we only read it once and copy in memory if needed.
	# @param[in] dimTransform The transformations for each dimension of each top-level name. Some dimensions may
	#  overlap and if this happens we duplicate the data to ensure consistency. This may be needed for cases where
	#  the same dimension may be required in 2 formats (i.e. position as quaternions as well as unnormalized 6DoF).
	def __init__(self, allDims : Dict[str, List[str]], dimGetter : Dict[str, DimGetterCallable], \
		dimTransform : Dict[str, Dict[str, Callable]]):
		self.allDims = allDims
		self.dimGetter = self.sanitizeDimGetter(dimGetter)
		self.dimTransform = self.sanitizeDimTransform(dimTransform)

	def sanitizeDimGetter(self, dimGetter : Dict[str, Callable]) -> Dict[str, Callable]:
		allDims : List[str] = list(set(flattenList(self.allDims.values())))
		for key in allDims:
			assert key in dimGetter
		return dimGetter

	def sanitizeDimTransform(self, dimTransform : Dict[str, Dict[str, Callable]]):
		allTopLevels = self.allDims.keys()
		for topLevel in allTopLevels:
			if not topLevel in dimTransform:
				print("[DatasetReader::sanitizeDimTransform] Top level name '%s' not present in dimTransforms" % \
					(topLevel))
				dimTransform[topLevel] = {}

			for dim in self.allDims[topLevel]:
				if not dim in dimTransform[topLevel]:
					print((("[DatasetReader::sanitizeDimTransform] Dim '%s'=>'%s' not present in ") + \
						("dimTransforms. Adding identity")) % (topLevel, dim))
					dimTransform[topLevel][dim] = lambda x : x
		return dimTransform

	# Generic infinite generator, that simply does a while True over the iterate_once method, which only goes one epoch
	# @param[in] type The type of processing that is generated by the generator (typicall train/test/validation)
	# @param[in] miniBatchSize How many items are generated at each step
	# @param[in] maxPrefetch How many items in advance to be generated and stored before they are consumed. If 0, the
	#  thread API is not used at all. If 1, the thread API is used with a queue of length 1 (still works better than
	#  normal in most cases, due to the multi-threaded nature. For length > 1, the queue size is just increased.
	def iterate(self, topLevel : str, batchSize : int, maxPrefetch : int = 0) \
		-> Iterator[Dict[str, np.ndarray]]:
		assert maxPrefetch >= 0
		while True:
			iterateGenerator = self.iterateOneEpoch(topLevel, batchSize)
			if maxPrefetch > 0:
				iterateGenerator = BackgroundGenerator(iterateGenerator, max_prefetch=maxPrefetch)
			for items in iterateGenerator:
				yield items
				del items

	# @brief The main iterator of a dataset. It will run over the data for one logical epoch.
	# @param[in] topLevel The top-level dimension that is iterated over (example: train, validation, test, etc.)
	# @param[in] batchSize The size of a batch that is yielded at each iteration
	# @return A generator that cna be used to iterate over the dataset for one epoch
	def iterateOneEpoch(self, topLevel : str, batchSize : int) -> Iterator[Dict[str, np.ndarray]]:
		raise NotImplementedError("Should have implemented this")

	# @brief Returns the number of items in a given top level name
	# @param[in] topLevel The top-level dimension that is iterated over (example: train, validation, test, etc.)
	# @return The number of items in a given top level name
	def getNumData(self, topLevel : str) -> int:
		raise NotImplementedError("Should have implemented this")

	# @brief Return the number of iterations in an epoch for a top level name, given a batch size.
	# @param[in] topLevel The top-level dimension that is iterated over (example: train, validation, test, etc.)
	# @param[in] batchSize The size of a batch that is yielded at each iteration
	def getNumIterations(self, topLevel : str, batchSize : int) -> int:
		N = self.getNumData(topLevel)
		return N // batchSize + (N % batchSize != 0)

	def summary(self) -> str:
		summaryStr = "[Dataset summary]\n"
		summaryStr += self.__str__() + "\n"

		summaryStr += "Top levels:"
		for topLevel in self.allDims:
			print(" -  %s : %s" % (topLevel, self.allDims[topLevel]))

	def __str__(self) -> str:
		return "General dataset reader. Update __str__ in your dataset for more details when using summary."